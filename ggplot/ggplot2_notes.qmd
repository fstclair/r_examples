---
title: "ggplot2"
author: "Faith St. Clair"
format: 
  html:
    toc: true
    theme: united
editor: source
include: false
linkcolor: 'hotpink'
---

## [**{ggplot2}**](https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/#data)

# **Preparation and the Dataset**

```{r}
# install CRAN packages
#install.packages(
 # c("ggplot2", "tibble", "tidyr", "forcats", "purrr", "prismatic", "corrr", 
  #  "cowplot", "ggforce", "ggrepel", "ggridges", "ggsci", "ggtext", "ggthemes", 
    #"grid", "gridExtra", "patchwork", "rcartocolor", "scico", "showtext", 
   # "shiny", "plotly", "highcharter", "echarts4r")
#)

# install from GitHub since not on CRAN
#install.packages("devtools")
#devtools::install_github("JohnCoene/charter")

#read in data
chic <- readr::read_csv("https://cedricscherer.com/data/chicago-nmmaps-custom.csv")
#show_col_types=FALSE #to silence column specification notice

tibble::glimpse(chic) #view data.frame

head(chic, 10)

```

------------------------------------------------------------------------

# **The {ggplot2} package**

A ggplot is built up from a few basic elements:

Data: The raw data that you want to plot.

Geometries geom\_: The geometric shapes that will represent the data.

Aesthetics aes(): Aesthetics of the geometric and statistical objects, such as position, color, size, shape, and transparency

Scales scale\_: Maps between the data and the aesthetic dimensions, such as data range to plot width or factor values to colors.

Statistical transformations stat\_: Statistical summaries of the data, such as quantiles, fitted curves, and sums.

Coordinate system coord\_: The transformation used for mapping data coordinates into the plane of the data rectangle.

Facets facet\_: The arrangement of the data into a grid of plots.

Visual themes theme(): The overall visual defaults of a plot, such as background, grids, axes, default typeface, sizes and colors.

# **A default ggplot**

```{r}
library(ggplot2)
# library(tidyverse)
```

ggplot needs three things that you have to specify: the data, aesthetics, and a geometry

```{r}
#map the variable 'date' to the x position and the variable 'temp' to the y position
(g <- ggplot(chic, aes(x = date, y = temp))) #aes stands for positional aesthetics - denote x and y variables
#store current ggobject in variable g

## WHY () AROUND CODE? : By using parentheses while assigning an object, the object will be printed immediately. Instead of writing g <- ggplot(...) and then g we simply write (g <- ggplot(...)).

#panel was created with nothing in it, does not know *how* we want to plot our data
#need to provide geometry
```

**Geometries**

-   many different ones called geoms - each function starts with `geom_`

-   can add to ggplot by default or by extension packages

-   tell ggplot which style we want to use

```{r}
#to create scatter plot:
g + geom_point()

#to create line plot
g + geom_line()

#combine several geometric layers
g+ geom_line() + geom_point()
```

**Change properties of geometries**

> `geom_*` can manipulate visual aesthetics such as the color, shape, and size of your points

```{r}
#turn all points into large fire-red diamonds
g + geom_point(color = "firebrick", shape = "diamond", size = 2)
#can use col short for color

```

[**Full list of R colors**](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf)


Each geom comes with its own properties (called *arguments*) and the same argument may result in a different change depending on the geom you are using.

```{r}

g + geom_point(color = "firebrick", shape = "diamond", size = 2) +
    geom_line(color = "firebrick", linetype = "dotted", lwd = .3)

```


## **Replace the default `ggplot2` theme**

Get rid of grayish default

Built-in themes:

> `theme_bw()` #black and white theme

> `theme_set()` #to set all the following plots will have same black and white theme


```{r}

theme_set(theme_bw())

g + geom_point(color = "firebrick")


```


Use [**"Working with Themes"**](https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/#themes) for theme customization.

*From the next chapter on, we will also use the `theme()` function to customize particular elements of the theme.*


[**Which details of a ggplot theme can be modified**](https://ggplot2.tidyverse.org/reference/theme.html)


## **Working with Axes**

### **Change Axis Titles**

- Add well-writted labels to the axes

> `labs()` with a character string to each label you want to change

```{r}
#here, we will be labeling x and y axes

ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)")



```

*Add each axis title via `xlab()` and `ylab()`*

- Can add symbols and other things, such as superscripts

```{r}

ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = expression(paste("Temperature (", degree ~ F, ")"^"(Hey, why should we use metric units?!)")))

```


### **Increase Space between Axis and Axis Titles**

`theme()` is essential and used to modify particular theme elements (texts, titles, boxes, symbols, backgrounds, ...). 

To modify text elements

- Can change the properties of all or particular text elements

- Overwrite default `element_text()` within `theme()` call

```{r}
#here we are editing axis titles

ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  theme(axis.title.x = element_text(vjust = 0, size = 15),
        axis.title.y = element_text(vjust = 2, size = 15))

```


> `vjust` #refers to the vertical alignment - ranges between 0 and 1 (can specify out of that range)

You can change the distance by specifying the margin of both text elements:

```{r}
ggplot(chic, aes(x = date, y = temp)) +
  geom_point(color = "firebrick") +
  labs(x = "Year", y = "Temperature (°F)") +
  theme(axis.title.x = element_text(margin = margin(t = 10), size = 15),
        axis.title.y = element_text(margin = margin(r = 10), size = 15))
```


The labels `t` and `r` within the `margin()` object refer to the *top* and *right*, respectively.

Can specify margins as: `margin(t, r, b, l)`.

*remember as "T-R-o-u-B-L-e"*

### **Change Aesthetics of Axis Titles**








